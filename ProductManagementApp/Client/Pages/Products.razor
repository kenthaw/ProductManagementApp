@page "/manageproducts"
@using ProductManagementApp.Client.Component
@using ProductManagementApp.Shared
@inject HttpClient Http

<h3>Product Page</h3>

<form class="mt-5" onsubmit="return false;">
	<div class="form-group">
		<label>Name </label>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newProduct.ProductName" />
	</div>
		<div class="form-group mt-2">
		<label>Model</label>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newProduct.ProductModel" />
	</div>
		<div class="form-group mt-2">
		<label>Part Number</label>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newProduct.PartNumber" />
	</div>
	<div class="form-group mt-2">
		<label>Price</label>
		<div class="input-group input-group-md mb-2">
		<span class="input-group-text">$</span>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newProduct.Price" />
		</div>
	</div>
	<div class="form-group mt-2">
		<label>Quantity</label>
		<input type="text" class="form-control" autocomplete="off" required @bind-value="newProduct.Quantity" />
	</div>

	<div class="mt-2">
		<button class="btn btn-success" @onclick="Add">Add</button>
	</div>
</form>



@if (products == null)
{
	<p><em>Loading...</em></p>
}

<div class="table-responsive">
	<table class="table table-hover table-striped">
		<thead>
			<tr>
				<th>Product Name</th>
				<th>Model</th>
				<th >Part Number</th>
				<th >Price</th>
				<th >Quantity</th>
				<th >Created DateTime</th>
				<th >Action</th>
			</tr>
		</thead>
		<tbody>
			<DataRepeaterComponent Items="products">
				<Row Context="product">
					<tr>
						<td>
							<input class="form-control" value="@product.ProductName" />
						</td>
						<td>
							<input type="text" class="form-control" value="@product.ProductModel"/>
						</td>
						<td>
							<input type="text" class="form-control" value="@product.PartNumber"/>
						</td>
						<td>
							<input type="text" class="form-control" value="@product.Price"/>
						</td>
						<td>
							<input type="text" class="form-control" value="@product.Quantity"/>
						</td><td>
							<input disabled type="text" class="form-control" value="@product.CreatedDateTime"/>
						</td>
						<td>
							<button class="btn btn-sm btn-danger m-1" @onclick="@(() => Delete(product.Id))">delete</button>
							<button class="btn btn-sm btn-primary m-1" @onclick="@(() => Save(product))">Save</button>
						</td>
					</tr>
				</Row>
			</DataRepeaterComponent>
		</tbody>
	</table>
</div>
@code {
	private List<Product> products;
	private Product newProduct = new Product();


	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		products = await Http.GetFromJsonAsync<List<Product>>("/api/products");
	}

	
	private async Task Add()
	{
		using (var msg = await Http.PostAsJsonAsync<Product>("/api/products", newProduct))
		{
			if (msg.IsSuccessStatusCode)
			{
				products.Add(await msg.Content.ReadFromJsonAsync<Product>());
			}
		}
	}

	private async Task Save(Product product)
	{
		using (var msg = await Http.PutAsJsonAsync($"/api/products/{product.Id}", product))
		{
			if (msg.IsSuccessStatusCode)
			{
				int i;
				for (i = 0; i < products.Count && products[i].Id != product.Id; i++) ;
				products.RemoveAt(i);

				products.Add(await msg.Content.ReadFromJsonAsync<Product>());
			}
		}
	}

	private async Task Delete(int id)
	{
		using (var msg = await Http.DeleteAsync($"/api/products/{id}"))
		{
			if (msg.IsSuccessStatusCode)
			{
				int i;
				for (i = 0; i < products.Count && products[i].Id != id; i++) ;
				products.RemoveAt(i);
			}
		}
	}

}
